{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "lampCommon": {
            "metadata": {
                "description": "Common Lamp values"
            },
            "type": "object"
        },
        "subnetIdWeb": {
            "metadata": {
                "description": "Azure resource ID of the subnet where this VMSS is to be deployed"
            },
            "type": "string"
        },
        "vmSetupParamsObj": {
            "metadata": {
                "description": "JSON-structured VM setup params that'll be injected to the VM (through cloud-init) and used by the custom script (setup_webserver.sh)"
            },
            "type": "object"
        }
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2017-06-01",
            "location": "[parameters('lampCommon').location]",
            "name": "[parameters('lampCommon').vmssdStorageAccounttName]",
            "kind": "Storage",
            "sku": {
                "name": "Standard_LRS"
            }
        },
        {
            "type": "Microsoft.Insights/autoscaleSettings",
            "apiVersion": "2015-04-01",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachineScaleSets/', parameters('lampCommon').vmssName)]"
            ],
            "location": "[parameters('lampCommon').location]",
            "name": "autoscalewad",
            "properties": {
                "enabled": true,
                "name": "autoscalewad",
                "profiles": [
                    {
                        "capacity": {
                            "default": "[parameters('lampCommon').autoscaleVmCountMin]",
                            "maximum": "[parameters('lampCommon').autoscaleVmCountMax]",
                            "minimum": "[parameters('lampCommon').autoscaleVmCountMin]"
                        },
                        "name": "Profile1",
                        "rules": [
                            {
                                "metricTrigger": {
                                    "metricName": "Percentage CPU",
                                    "metricNamespace": "",
                                    "metricResourceUri": "[variables('vmssID')]",
                                    "operator": "GreaterThan",
                                    "statistic": "Average",
                                    "threshold": 60,
                                    "timeAggregation": "Average",
                                    "timeGrain": "PT1M",
                                    "timeWindow": "PT5M"
                                },
                                "scaleAction": {
                                    "cooldown": "PT10M",
                                    "direction": "Increase",
                                    "type": "ChangeCount",
                                    "value": "1"
                                }
                            },
                            {
                                "metricTrigger": {
                                    "metricName": "Percentage CPU",
                                    "metricNamespace": "",
                                    "metricResourceUri": "[variables('vmssID')]",
                                    "operator": "LessThan",
                                    "statistic": "Average",
                                    "threshold": 30,
                                    "timeAggregation": "Average",
                                    "timeGrain": "PT1M",
                                    "timeWindow": "PT5M"
                                },
                                "scaleAction": {
                                    "cooldown": "PT10M",
                                    "direction": "Decrease",
                                    "type": "ChangeCount",
                                    "value": "1"
                                }
                            }
                        ]
                    }
                ],
                "targetResourceUri": "[variables('vmssID')]"
            }
        }
    ],
    "variables": {
        "singleQuote": "'",
        "dstorID": "[resourceId('Microsoft.Storage/storageAccounts',parameters('lampCommon').vmssdStorageAccounttName)]",
        "extBeID": "[concat(variables('extLbID'),'/backendAddressPools/',parameters('lampCommon').extBeName)]",
        "extFeID": "[concat(variables('extLbID'),'/frontendIPConfigurations/',parameters('lampCommon').extFeName)]",
        "extLbID": "[resourceId('Microsoft.Network/loadBalancers',parameters('lampCommon').lbName)]",
        "pipID": "[resourceId('Microsoft.Network/publicIPAddresses',parameters('lampCommon').lbPipName)]",
        "vmssID": "[resourceId('Microsoft.Compute/virtualMachineScaleSets',parameters('lampCommon').vmssName)]",
        "webvmss1NIC": "[concat('Microsoft.Compute/virtualMachineScaleSets/', parameters('lampCommon').vmssName, '/virtualMachines/0/networkInterfaces/vmssnic')]",
        "appGwID": "[resourceId('Microsoft.Network/applicationGateways', parameters('lampCommon').appGwName)]",
        "appGwBePoolId": "[concat(variables('appGwID'), '/backendAddressPools/', parameters('lampCommon').appGwBePoolName)]",
        "lbBePoolArray": [
            {
                "id": "[variables('extBeID')]"
            }
        ],
        "lbBePoolArrayTakeCount": "[if(equals(parameters('lampCommon').httpsTermination, 'AppGw'), 0, 1)]",
        "appGwBePoolArray": [
            {
                "id": "[variables('appGwBePoolId')]"
            }
        ],
        "appGwBePoolArrayTakeCount": "[if(equals(parameters('lampCommon').httpsTermination, 'AppGw'), 1, 0)]"
    },
    "outputs": {
        "webvm1IP": {
            "value": "[reference(variables('webvmss1NIC'), '2017-03-30').ipConfigurations[0].properties.privateIPAddress]",
            "type": "string"
        }
    }
}
